def pnext(p):
    i, k = 0, -1
    m = len(p)
    pnext = [-1] * m
    while(i < m - 1):
        if k == -1 or p[i] == p[k]:
            i , k = i + 1, k + 1
            if p[i] == p[k]:
                pnext[i] = pnext[k]
            else:
                pnext[i] = k
        else:
            k = pnext[k]            
    return pnext
    
def matching_kmp(t, p, pnext):
    j, i = 0, 0
    n, m = len(t), len(p)
    while j < n and i < m:
        if i == -1 or t[j] == p[i]:
            j , i = j + 1, i + 1
        else:
            i = pnext[i]
    if i == m:
        return j - i
    return -1
